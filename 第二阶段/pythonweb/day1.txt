吕泽
lvze@tedu.cn

8天进程线程网络编程
5 MongoDB + 正则表达式
3 天 项目编码


网络编程


网络起源和应用

网络的用途：数据传输

ISO(国际标准化组织) ----》 OSI七层模型

OSI 七层模型  -----》 网络通信标准化模型

应用层  ： 提供用户服务，具体的内容由应用程序而定
表示层  ： 数据的压缩加密，数据结构的优化
会话层  ： 建立应用连接，选择传输服务
传输层  ： 提供传输服务，进行流量控制
网络层  ： 路由选择，网络互联
链路层  ： 提供链路交换，将消息进行发送处理
物理层  ： 提供物理硬件，传输介质，接口规定

osi七层模型的好处： 将功能分离，降低网络传输过程中每一步的耦合性。使开发流程更加清晰，每一步各司其职

四层模型

应用层 ： 应用层  表示层   会话层
传输层
网络层
物理链路层


五层模型（TCP/IP模型）

应用层：应用层  表示层   会话层
传输层
网络层
链路层
物理层


网络协议 ：  网络通信中，各方必须遵守的规定。包括为实现具体功              能制定的具体方法 


应用层 ：TFTP  HTTP  DNS  SMTP
传输层 : TCP  UDP
网络层 : IP
物理层 : IEEE


主机 ： host  表示一个台网络上计算机

本机使用 ： 'localhost'   '127.0.0.1'

网络使用 ： '0.0.0.0'  '172.60.50.53'

In [2]: socket.gethostname()
Out[2]: 'tedu'

In [3]: socket.gethostbyname('tedu')
Out[3]: '127.0.1.1'


IP地址
在网络上唯一确定一台主机

IPv4 ： 点分十进制    192.168.1.6  0-255

IPv6 ： 128位

网络连接测试
ping  172.60.50.62

特殊IP
127.0.0.1  本地测试
0.0.0.0   检测可用网卡IP
192.168.1.0  当前网段
192.168.1.1  网关
192.168.1.255  广播IP


In [5]: socket.gethostbyaddr('www.baidu.com')
Out[5]: ('127.0.0.1', [], ['119.75.213.61'])
          主机       别名   IP地址


IP地址表示方式转换
In [7]: socket.inet_aton('192.168.1.2')
Out[7]: b'\xc0\xa8\x01\x02'

In [8]: socket.inet_ntoa(b'\xc0\xa8\x01\x02')
Out[8]: '192.168.1.2'


域名 ： 网络服务器地址的网络名称

端口号 ：端口号是网络地址的一部分，在一个系统中每个网络应用都有不同的端口

范围 ： 1--65535
1-255 ： 一些通用的众所周知的程序占用
256 -1023 系统应用端口
1024--65524  推荐 > 10000

In [9]: socket.getservbyname('mysql')
Out[9]: 3306


字节序
数据在内存中的解析方式，不同的操作系统可能不同

网络字节序： 不同操作系统在消息手法时均按照网络字节序解析


传输服务

面向连接的传输服务   ----》 tcp协议

传输特征：

提供了可靠的数据传输
可靠性 ： 无失序  无差错  无丢失  无重复

所有消息传输钱一定建立连接，传输后一定有断开的过程

三次握手： 数据传输前建立tcp连接的过程
1. 客户端发起连接请求
2. 服务端获取请求后 回复客户端可以连接
3. 客户端收到回复后，发送消息确认连接

四次挥手： 连接断开时一个完整的断开过程
1. 主动端发起断开连接的请求
2. 被动端得到请求后回复主动端，告知已经收到请求
3. 被动端处理消息完毕后再次发送给主动方告知
4. 主动方完成断开

适用情况：对传输的内容准确性要求较高
比如 ： 文件传输   邮件的发送    网页的获取


面向无连接的传输服务  ---》 udp协议

传输特点：
不保证传输的可靠性
没有连接过程
收据收发自由，没有连接约束

适用情况：网络状况可能不确定，实时性要求高
比如： 视频聊天，广播


socket套接字编程

目的 ： 通过python提供的函数接口进行组合应用，完成基于tcp或者udp传输的数据发送接收

套接字 ： 完成上述目标的一种编程手段和编程方法

套接字分类 

流式套接字 （SOCK_STREAM）: 传输层基于tcp协议进行通信
														可靠的传输，字节流的方式传递数据
数据报套接字 （SOCK_DGRAM）: 传输层基于udp协议进行通信
                             不可靠的无连接的，数据报方式 

底层套接字： 访问底层协议的套接字


基于tcp协议的是编程

import  socket 

socket.socket(socket_family = AF_INET,
              socket_type = SOCK_STREAM,
							proto = 0)

功能： 创建套接字
参数： socket_family：选择地址族类型，AF_INET 基于ipv4的网络                        传输
       socket_type : 表示创建套接字类型  SOCK_STREAM  流式
			                                   SOCK_DGRAM  数据报
			 proto ：子协议类型  0

返回值： 套接字对象


sockfd.bind()
功能 ： 绑定地址
参数 ： 元组 (ip,port)  e.g.  ('192.168.1.3',8888)

sockfd.listen(n)
功能： 将套接字设置为监听套接字
参数 ： n是一个正整数，表示监听等待队列的大小

connfd,addr = sockfd.accept()
功能：等待接收客户端连接请求
返回值： connfd    新的客户端连接套接字
         addr    客户端的地址

data = connfd.recv(buffersize)
功能 ： 接收消息
参数 ： 一次最多接收的消息 字节数
返回值 ： 接收到的内容

n = connfd.send(data)
功能： 发送消息
参数： 要发送的内容    bytes
返回值 ： 实际发送的字节数

sockfd.close()
功能 ： 关闭套接字对象

客户端

connect()
功能 ： 发起连接
参数 ： 元组 同bind()

* 当连接断开后，对应套接字调用的recv不在阻塞立即返回空字串
* 当一端已经关闭，另外一端仍然试图send则会出现管道破裂

1. 客户端和服务端的套接字类型需要相同
2. accept和recv都是阻塞函数，在收发消息上必须注意防止死阻塞产    生