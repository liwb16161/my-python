#-*- coding:utf-8 -*-




面向对象编程oop(object-oriented programming):

把一切看成对象（实例），用各种对象之间的关系来描述事务。
对象有什么特征：
	对象有很多属性（名词）
	对象有什么行为（动作 动词）

类：
拥有相同属性和行为的对象分为一组，组成一个类。
类是用来描述对象的工具，用类可以创建类的对象。


class 类名(继承列表)：
	‘’‘类的文档字符串’‘’
	实例方法定义
	类变量的定义
	类方法的定义（@classmethod）
	静态方法的定义（@staticmethod）

isinstance('123',str)  #True


__slots__属性



1、继承inheritance 和 派生 derived：

继承：从已有的类中派生出新类，新类具有原类的属性和行为，并扩展新的行为。
派生：就是从一个已有的类中派生出新类，在新的类上可以添加新的属性和行为。

作用：
	用继承派生机制，可以将一些共有的功能加在基类中，实现代码共享。
	在不改变超类的代码基础上改变原有的功能。
名词：
	基类（base class）/超类（super class）/父类（father class）
	派生类（derived class）/子类（child class）

单继承：
语法：
class 类名（基类名）：
	语句块

说明：
	单继承是指派生类由一个基类衍生出来的

继承说明：
	任何类都直接或者间接的继承自object类
	object类是一切类的超类


__base__ 父类


覆盖：override

	覆盖是指由继承关系的类中，子类中实现了与父类中同名的方法，在子类实例调用该方法时，实际覆盖子类中的覆盖版本，这种现象叫覆盖。


当覆盖发生时，子类对象能否调用父类的方法？

子类对象显示调用基类的方法
	基类名.方法名

	class A:
		def work(self):
			pass
	
	class B(A):
		pass

	b=B()
	A.work(b)

	super(B,b).work(). #


super函数：

super(type,obj) 返回绑定超类的实例（要求obj必须为type类型的实例）
super（）返回绑定基类的实例，等同于super(__class__,实例方法的第一个参数)，必须用在方法内调用，根据__mro__属性的顺序找上一个类。

作用：
	戒指super返回的对象间接调用父类的方法。
	调用父类的覆盖版本。

显式调用基类的初始化方法：
	当子类中实现了__init__方法，基类的构造方法不在被调用。
	用super调用父类的构造方法。



issubclass()  判断类型直接的父子关系。


2、封装：enclosure
	封装是指隐藏类的实现细节，让使用者不关心这些细节。
	封装的目的是让使用者通过尽可能少的实例变量或者方法操作对象


私有属性和方法：
	python 中以__开头，不以双下划线结尾的标识符为私有成员，私有成员只能使用此类的方法来进行
	访问子类和其他函数都无法访问。
	此类的方法可以访问此类的私有属性。

python是假封装，a._A__p1 可以访问。


3、多态 polymorphic
	字面意思是多种状态。
	多态是指在继承/派生关系的类中，调用基类对象的方法，实际能调用子类的覆盖方法的现象叫多态。

	程序状态：
	静态（编译时决定调用哪个方法）
	动态（运行时决定调用哪个方法）

说明：
	python 全部对象都只有运行时状态(动态)
	没有c++里的编译时状态



面向对象编程语言的特征：
继承/派生
封装
多态
python/c++/java/swift/c# ...

多继承：multiple inheritance
	多继承指一个子类继承自两个或者两个以上的基类。

	语法：
	class 类名(基类1，基类2,.....)：
		......

	说明：
	一个子类继承自多个父类，基类中的方法可以同时被继承下来。
	如果两个父类中有同名的方法，而在子类中没有覆盖此方法时，调用结果难以确定。


	问题及缺陷：
		标识符（名字空间）冲突问题
		谨慎使用多继承


	多继承的mro问题（method resolution order ）
	类的__mro__属性：
		作用：用来记录类的方法查找顺序，




方法重写：
	__str__()
	__repr__()
内建函数重写：
	方法名         函数名
	__abs__       abs(obj)
	__len__       len(obj)
	__reversed__  reversed(obj)
	__round__     round(obj)


数值函数重写：
	__complex__    complex(obj)
	__int__        int(obj)
	__float__
	__bool__            

bool函数重写：
	格式：
	def __bool__(self):
		......

	作用：
		用于bool(obj)函数取值
		用于if语句真值表达式中
		用于while语句真值表达式中

	说明：
		1、当自定义类的类内有__bool__(self)方法时，此方法返回值作为bool(obj)的返回值
		2、当不存在__bool__(self)方法时，bool(x)根据__len__(self)方法的返回值是否为
		 0来测试布尔值
		3、如果__len__(self)不存在，直接返回True.


迭代器：
	可以通过next(it)函数取值的对象就是迭代器
迭代器协议：
	指对象能够通过next(it)函数获取下一项数据，在没有下一项数据时触发一个
	StopIteration异常来终止迭代的约定。
	迭代器协议的实现方法：
		__next__(self)


	def __iter__(self):   类里要有__iter__方法   



























